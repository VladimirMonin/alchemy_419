"""
–ú–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –º–æ–¥—É–ª—å –≤ main.py –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
"""

import logging


def setup_logging(
    level=logging.INFO, log_file="app.log", sqlalchemy_log_file="sqlalchemy.log"
):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    :param level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    :param log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    :param sqlalchemy_log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ SQLAlchemy
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logging.basicConfig(
        level=level,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler(log_file, encoding="utf-8"),
            logging.StreamHandler(),
        ],
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è SQLAlchemy
    sqlalchemy_logger = logging.getLogger("sqlalchemy.engine")
    sqlalchemy_logger.setLevel(logging.INFO)  # –£—Ä–æ–≤–µ–Ω—å –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤

    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–æ—Å—å –≤ app.log)
    sqlalchemy_logger.propagate = False

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è SQLAlchemy
    sqlalchemy_handler = logging.FileHandler(sqlalchemy_log_file, encoding="utf-8")
    sqlalchemy_handler.setFormatter(
        logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
    )
    sqlalchemy_logger.addHandler(sqlalchemy_handler)

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤—ã–≤–æ–¥–∏—Ç—å SQL –≤ –∫–æ–Ω—Å–æ–ª—å (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ)
    sqlalchemy_console = logging.StreamHandler()
    sqlalchemy_console.setFormatter(logging.Formatter("üóÑÔ∏è SQL: %(message)s"))
    sqlalchemy_logger.addHandler(sqlalchemy_console)

    logging.info("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    logging.info(f"SQL –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {sqlalchemy_log_file}")


def setup_debug_logging():
    """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏."""
    logging.basicConfig(
        level=logging.DEBUG,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler("debug.log", encoding="utf-8"),
            logging.StreamHandler(),
        ],
    )

    # SQLAlchemy —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
    sqlalchemy_logger = logging.getLogger("sqlalchemy")
    sqlalchemy_logger.setLevel(logging.DEBUG)
    sqlalchemy_logger.propagate = False

    sqlalchemy_handler = logging.FileHandler("sqlalchemy_debug.log", encoding="utf-8")
    sqlalchemy_handler.setFormatter(
        logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    )
    sqlalchemy_logger.addHandler(sqlalchemy_handler)

    logging.info("Debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")


def setup_production_logging():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞."""
    logging.basicConfig(
        level=logging.WARNING,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.FileHandler("production.log", encoding="utf-8"),
            logging.StreamHandler(),
        ],
    )

    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ SQLAlchemy –ª–æ–≥–∏ –æ—Ç–∫–ª—é—á–∞–µ–º –∏–ª–∏ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º
    sqlalchemy_logger = logging.getLogger("sqlalchemy.engine")
    sqlalchemy_logger.setLevel(logging.WARNING)  # –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
    sqlalchemy_logger.propagate = False

    logging.info("Production –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")


def setup_custom_sqlalchemy_logging(
    sql_log_file="sql_queries.log", sql_level=logging.INFO, include_params=True
):
    """
    –î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è SQLAlchemy.

    :param sql_log_file: –§–∞–π–ª –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
    :param sql_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è SQL
    :param include_params: –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    # –õ–æ–≥–≥–µ—Ä –¥–ª—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
    sql_logger = logging.getLogger("sqlalchemy.engine")
    sql_logger.setLevel(sql_level)
    sql_logger.propagate = False

    sql_handler = logging.FileHandler(sql_log_file, encoding="utf-8")
    sql_handler.setFormatter(logging.Formatter("%(asctime)s - %(message)s"))
    sql_logger.addHandler(sql_handler)

    if include_params:
        # –õ–æ–≥–≥–µ—Ä –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        params_logger = logging.getLogger("sqlalchemy.engine.base.Engine")
        params_logger.setLevel(logging.DEBUG)
        params_logger.propagate = False
        params_logger.addHandler(sql_handler)

    logging.info(f"SQLAlchemy –ª–æ–≥–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: {sql_log_file}")
